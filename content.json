{"meta":{"title":"Welcome to my blog!","subtitle":"blogs","description":"","author":"CodeMajic","url":"http://codemajic.cn","root":"/"},"pages":[{"title":"","date":"2020-10-14T12:59:24.922Z","updated":"2020-10-14T12:59:24.915Z","comments":false,"path":"about/index.html","permalink":"http://codemajic.cn/about/index.html","excerpt":"","text":"自我介绍"},{"title":"所有分类","date":"2020-10-14T08:02:00.072Z","updated":"2020-07-06T12:46:38.000Z","comments":true,"path":"categories/index.html","permalink":"http://codemajic.cn/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-03-14T09:09:57.000Z","updated":"2020-03-14T17:11:30.000Z","comments":true,"path":"contact/index.html","permalink":"http://codemajic.cn/contact/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-03-22T06:59:00.000Z","updated":"2020-04-04T08:30:00.000Z","comments":false,"path":"link/index.html","permalink":"http://codemajic.cn/link/index.html","excerpt":"","text":""},{"title":"","date":"2020-10-14T12:41:56.558Z","updated":"2020-10-14T12:41:56.552Z","comments":true,"path":"friends/index.html","permalink":"http://codemajic.cn/friends/index.html","excerpt":"","text":""},{"title":"movies","date":"2020-03-22T07:49:32.000Z","updated":"2020-03-22T07:49:32.000Z","comments":true,"path":"movies/index.html","permalink":"http://codemajic.cn/movies/index.html","excerpt":"","text":""},{"title":"music","date":"2020-03-22T07:49:17.000Z","updated":"2020-03-22T07:49:18.000Z","comments":true,"path":"music/index.html","permalink":"http://codemajic.cn/music/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-10-14T12:41:00.893Z","updated":"2020-07-06T12:47:26.000Z","comments":true,"path":"tags/index.html","permalink":"http://codemajic.cn/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-10-14T08:02:19.756Z","updated":"2020-10-14T08:02:19.750Z","comments":true,"path":"mylist/index.html","permalink":"http://codemajic.cn/mylist/index.html","excerpt":"","text":""}],"posts":[{"title":"当前任务简要规划","slug":"Plan","date":"2020-10-18T14:22:18.188Z","updated":"2020-10-18T14:36:35.559Z","comments":true,"path":"post/54ac.html","link":"","permalink":"http://codemajic.cn/post/54ac.html","excerpt":"","text":"短期规划(2020.10.18) DP论文研读,分析对比解析方法,以及创新点 DP模型代码阅读 预料数据预处理(已完成) 模型数据流整理和模型解析方法(已完成) 模型性能评测(待解决) 论文阅读 ​ 对于论文的阅读主要在于分析对比当前模型的创新之处,以及性能提升的要点,同时需要在阅读完成之后进行论文内容的个人整理和梳理. 反复阅读 分析记录 Coding ​ 对于代码能力不仅在于模型的代码阅读,更重要的在于对于给定需求的实现,可通过Leetcode算法刷题进行代码能力的提升,同时对于当前篇章分析方向模型代码,需要仔细梳理数据维度的每一步转换,以及常规的解析做法. 算法刷题 模型代码阅读 每日时间规划 ​ 规定时间的自律,胜过额外的增加时间. 7.30am : Get up 8.30~11.30 : Paper reading and algorithm practise 13:30~17:00 : Model 19:00~21:00 : Extra time!","categories":[{"name":"个人记录","slug":"个人记录","permalink":"http://codemajic.cn/categories/%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"DP","slug":"DP","permalink":"http://codemajic.cn/tags/DP/"}]},{"title":"JS用法小记","slug":"JavaScript","date":"2020-10-18T11:29:11.000Z","updated":"2020-10-18T14:15:03.827Z","comments":true,"path":"post/a17a.html","link":"","permalink":"http://codemajic.cn/post/a17a.html","excerpt":"","text":"JavaScript 动态网站 弱类型语言：变量类型可变 html和JS结合使用 使用script标签内嵌JS代码，当前为标签内定义js代码 JS单独文件提高复用性，进行使用，当前为使用标签引入js文件 src属性指定JS文件路径 语法规则 var name：定义变量，弱类型，无需指定变量类型 alert()：控制台警告提示 关系运算： ==：比较变量内容是否相同，内容相同就位true ===：比较变量内容和类型是否都相同 逻辑运算，JS中所有的变量都可以作为boolean类型去使用，0、null、undefined、“”都为false &amp;&amp;：且运算 当表达式全为true，返回最后一个表达式的值 当表达式存在false，返回第一个为假的值 ||：或运算 当表达式都为false，返回最后一个表达式的值 只要有一个表达式的值为真，返回第一个为真的值 ！：取反运算 数组：！！！，动态扩充 var 数组名 = []，定义空数组 var 数组名 = [1,‘abc’,true]， 定义数组同时赋值 array.length：读取数组的长度 var arr = [] # 定义空数组 arr[0] = 1 # 通过下标动态扩容 arr[2] = 3 # 指定下标赋值，跳过的元素默认为undefine for(var i=0;i&lt;arr.length;i++){ # 遍历数组内容 alert(arr[i]); } 函数：！！！ function关键字定义函数：function name(形参列表){}，因为是弱类型，形参无需指定类型。 var name = function(形参列表){函数体}：第二种定义方式 不允许函数重载，会覆盖上次定义 arguments隐形参数:将函数参数以该变量数组形式引用 arguments.length:参数个数 arguments[i]:第i个参数 自定义对象:object对象和{}创建对象 # 创建Object对象 var obj = new Object() # 定义Object对象 obj.name = \"John\" # 定义name属性 obj.age = \"18\" # 定义age属性 obj.fun = funtion(){ # 定义对象的函数 alert(\"hello John!\") } # 使用{}创建对象 var obj = {} # 创建空对象 var obj1 = { name: value, name1:value1, func:function(){} } # 采用相同方式引用对象属性和方法 JS中的事件:电脑输入设备和页面进行交互的响应称之为事件. onload:加载完成事件,常用于页面js代码初始化操作 onclick:单击时间,用于按钮的点击响应操作 onblur:失去焦点事件,常用于输入框失去焦点验证输入内容是否合法 onchange:内容发送改变事件, onsubmit:表单提交事件,常用于表单提交前验证表单项是否合法 变量类型 变量定义：var name number：数值类型 string：字符串 object：对象类型 boolean：布尔类型 function：函数类型 特殊值 undefined：未定义，未赋初始值变量都为未定义 null：空值 NAN：非数值 事件的注册(绑定) ​ 告诉浏览器当事件响应后要执行那些操作代码,叫事件注册或绑定,分为静态和动态. 静态注册事件:通过html的事件属性赋予事件响应后的代码 动态注册事件:先通过js代码得到标签的dom对象,在通过dom对象.事件名=function(){}形式赋于事件响应后的代码,叫动态注册,基本步骤如下: 获取标签对象 标签对象.事件名=function(){} onload事件 静态注册:浏览器解析完网站后自动执行的操作,在标签的onload属性中编写操作代码或者引入JS功能函数. 动态事件 &lt;script type=\"text/javascript\"&gt; function onloadFunc(){ // 用于标签中的事件标签使用 alert(\"hello\"); } window.onload = function(){ // 动态事件自动加载 alert(\"hello\"); } &lt;/script&gt; onclick事件 静态事件:设置标签中onclick属性需要的操作 动态事件,获取对象后设置对象事件名需要的操作 &lt;script&gt; function onloadFunc(){ // 供静态事件使用的功能,只需在对应事件标签指定 alert(\"hello\"); } window.onload = function(){ var btn = document.getElemById(\"btn01\"); // 根据标签id取得对象 btn.onclick = function(){ // 指定对象对应事件的反应 alert(\"hello\"); } } &lt;/script&gt; onblur事件：失去焦点事件 静态注册：在标签的onblur属性中应用JS函数 动态注册 &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; function func1(){ //静态时间注册功能函数 console.log(\"用户名输入框失去焦点！\"); } window.onload = function(){ // 动态事件根据id获取后进行功能编写 pass = document.getElementById(\"pass\") pass.onblur = function(){ console.log(\"password loss focus!\") } } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; 用户名:&lt;input onblur=\"func1()\"&gt; //静态方法 密码:&lt;input id=\"pass\"&gt; //动态事件设置id onchange事件：常用语下拉框内容改变 静态事件注册 动态事件注册 onsubmit事件：表单提交事件，常用于验证所有表单项是否合法 “return false”：可以阻止表单提交 &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; function func1(){ //验证合理数据，需要在onsubmit标签中使用return funcname alert(\"表单提交！\") return true } function func2(){ //设置返回值，决定当前提交是否完成 alert(\"表单提交失败，存在不合法数据！\") return false } window.onload = function (){ //动态事件、设置返回值，决定当前提交是否完成 var form = document.getElementById(\"form1\"); form.onsubmit = function (){ alert(\"表单提交失败！\") return false } } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=\"http://localhost:8080\" method=\"get\" onsubmit=\"return func1()\"&gt; &lt;input type=\"submit\" value=\"静态注册\"&gt; &lt;/form&gt; &lt;br/&gt; &lt;form action=\"http://localhost:8080\" method=\"get\" id=\"form1\"&gt; &lt;input type=\"submit\" value=\"动态注册\"&gt; &lt;/form&gt; DOM模型（文档对象模型） ​ 将文档中的标签、属性、文本转换成对象来管理 ​ 优先使用id、其次name最后是标签且需要在页面加载完成之后进行查询 document.getElementById(elementId)：通过标签中的id属性获得该标签对象，存在多个相同id返回第一个 实例：验证用户名是否合法，使用正则表达式匹配，并且在输入框右边使用文字进行显示。 源码 document.getElementsByName(elementName)：返回所有name为指定值的标签对象数组，顺序为在html页面中的顺序 实例：对于一组选择框，设计全选，全不选和反选按钮，并且实现相关功能，并且检查最终提交是否至少选择一项。 源码 document.getElementsByTagName(tagname)：根据标签名返回标签对象集合，集合中都为dom对象，元素顺序为html页面中出现的顺序 document.createElement(&quot;&quot;)：创建标签 节点常用的属性和方法（DOM数的操作方法） childNodes：获取当前节点的所有子节点 firstChild：当前节点的第一个子节点对象 innerHTML：设置标签对象之间的内容 appendChild：给指定标签添加子节点 实例：通过JS代码在页面加载完成之后添加标签以及适当的内容 源码","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://codemajic.cn/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://codemajic.cn/tags/Javascript/"}]},{"title":"CSS简单使用","slug":"CSS","date":"2020-10-16T11:48:44.000Z","updated":"2020-10-18T14:17:35.468Z","comments":true,"path":"post/198d.html","link":"","permalink":"http://codemajic.cn/post/198d.html","excerpt":"","text":"CSS 层叠样式表单 用于控制网页样式，并且和网页内容分离 HTML和CSS结合使用 html中标签设置style属性，代码复用性差。 在head中的style标签中定义网页中各类标签指定的样式，能够同时指定所有的同类标签样式 style标签中的为css内容 只能在一个页面中进行复用 把css样式写成单独的css文件，再通过link标签引入复用即可 &lt;link rel=“stylesheet” type=“text/css” href=“1.css”/&gt; 引入1.css文件中写的样式 CSS选择器 标签名选择器：设置页面中指定标签的样式 div { property: value } id选择器：可以让我们通过id属性选择使用样式 通过在页面中标签的id属性指定使用的样式 #id001{ property: value } class（类）选择器：标签通过class属性选择样式 .class01{ property: value } 组合选择器：可以上多个选择器共用一个代码 使用逗号分开 .class01,#id01{ property: value } 常用样式 color：指定字体颜色 border：指定标签边框相关属性 width：宽度 height：高度 background-color：背景颜色 font-size：字体大小 text-align：设置文字对齐方式","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://codemajic.cn/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://codemajic.cn/tags/CSS/"}]},{"title":"HTML简单使用","slug":"HTML","date":"2020-10-16T11:10:35.000Z","updated":"2020-10-18T14:17:53.976Z","comments":true,"path":"post/d562.html","link":"","permalink":"http://codemajic.cn/post/d562.html","excerpt":"","text":"HTML html标签 标签名大小写不敏感，且分为单标签和双标签，标签需要正确闭合 标签属性必须&quot; &quot;内赋值 &lt;br /&gt;：换行标签 &lt;hr /&gt;：水平线 &lt;font&gt;：字体标签用于修改字体的各项属性 color：指定颜色 face：指定字体 size：指定字体大小 特殊字符：对于带&lt;&gt;的内容会直接解释成html语言，需要使用特殊标签让标签打印在网页上 &lt;：&amp;lt; &gt;：&amp;gt; 空格：&amp;nbsp; 标题标签：h1~h6 align：设置对齐方式，默认左对齐 &lt;a&gt;：超链接标签 href：设置跳转地址 target：设置跳转链接本标签页打开还是新标签页打开，默认为当前页打开 &lt;ul&gt;：无序列表（ol为有序列表） &lt;li&gt;设置列表项 type：设置列表项前面符号 &lt;img&gt;：显示图片标签 src：设置图片路径，区分相对路径和绝对路径 width：设置宽度 height：设置高度 border：边框效果 alt：设定当路径不正确时，默认显示的内容 &lt;table&gt;：表格标签&lt;tr&gt;设置行数量&lt;td&gt;设置行中的列数量，嵌套定义 &lt;tr&gt;：行标签 &lt;td&gt;：单元格标签，同时可以指定单元格文本对齐方式 &lt;th&gt;：表头标签 border：设置表格边框 width、height：设置宽高 align：设置表格相对于页面的对齐方式 cellspacing：设置单元格间距 &lt;iframe&gt;：在页面中打开小窗口，加载单独的页面 src：指定单独显示的页面地址 width、height：指定小区域的宽度和高度 和&lt;a&gt;标签混合使用，设置点击超链接在ifame窗口中加载，步骤如下： &lt;iframe&gt;：设置name属性定义名称 &lt;a&gt;：标签中的target属性指定为iframe的name值 &lt;form&gt;：表单标签，用于在网页中收集用户数据 action：设置提交的服务器地址 method：设置提交的方式，默认为get GET特点：浏览器中的地址是action属性+？+请求参数，格式为name=value&amp;password，不安全。 POST特点：浏览器中地址只有action属性，相对安全，理论上没有数据长度的限制 数据提交时，数据没有发送给服务器的三种情况 表单项没有name属性值 单选、复选（下拉列表中的option标签）都需要添加value属性，以便发送给服务器 表单项不在提交的form标签中 使用表格存储表单内容能够布局更加整齐 &lt;input&gt;： type=“text”：文本输入，value设置输入框中的默认值 type=“password”：密码输入框，value设置输入框中的默认值 type=“radio”：单选框，name属性进行分组，checked=&quot;checked&quot;表示默认选中 type=“checkbox”：复选框，checked=&quot;checked&quot;表示默认选中 type=“reset”：重置选项，value属性修改按钮上的文本 type=“submit”：提交按钮，value属性修改按钮上的文本 type=“button”：按钮，value属性修改按钮上的文本 type=“file”：文件上传域 type=“hidden”：隐藏域，无需用户参与，且需要在提交服务器时的内容 &lt;select&gt;：下拉列表框，子标签&lt;option&gt;设置下拉框内容，子标签的select=“selected”设置下拉框默认选项 &lt;textarea&gt;：多行文本输入框 rows：指定可以显示多少行 cols：设置每行显示多少字符宽度 标签之间内容指定默认值 &lt;div&gt;：内容默认独占一行 &lt;span&gt;：长度是封装数据的长度 &lt;p&gt;：默认会在段落的上方或者下方空出一行（已有不再空）","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://codemajic.cn/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://codemajic.cn/tags/HTML/"}]},{"title":"Hello hexo,hello world!","slug":"Hello","date":"2020-10-14T14:27:15.181Z","updated":"2020-10-18T13:41:59.256Z","comments":true,"path":"post/95d1.html","link":"","permalink":"http://codemajic.cn/post/95d1.html","excerpt":"","text":"个人博客 ​ 今天是2020年10月14日,终于在今天利用hexo搭建出了一个自己比较满意的博客,虽然还存在需要改进和优化的地方,对于文章发布和记录部分已经没有问题. 初心 ​ 俗话说:好记性不如烂笔头,希望能够此博客记录自己成长以及生活的点滴,接触hexo也有一段时间了,在经历了对于喜爱的主题各种折腾之后,终于找到了一个自己相对满意的主题,当然存在一些尚未完善的地方,不过对于文章部分已经不存在问题,希望能够在之后的使用过程中不断完善、不断提升自我,也希望自己记录的内容能够给他人带来帮助. 博客内容 ​ 由于是个人博客旨在记录个人在学习和生活中的点滴,博客大致内容如下: 学习记录 生活点滴 Hello hexo! Hello blog! Hello world!","categories":[{"name":"个人记录","slug":"个人记录","permalink":"http://codemajic.cn/categories/%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://codemajic.cn/tags/hexo/"}]}],"categories":[{"name":"个人记录","slug":"个人记录","permalink":"http://codemajic.cn/categories/%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95/"},{"name":"Web开发","slug":"Web开发","permalink":"http://codemajic.cn/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"DP","slug":"DP","permalink":"http://codemajic.cn/tags/DP/"},{"name":"Javascript","slug":"Javascript","permalink":"http://codemajic.cn/tags/Javascript/"},{"name":"CSS","slug":"CSS","permalink":"http://codemajic.cn/tags/CSS/"},{"name":"HTML","slug":"HTML","permalink":"http://codemajic.cn/tags/HTML/"},{"name":"hexo","slug":"hexo","permalink":"http://codemajic.cn/tags/hexo/"}]}